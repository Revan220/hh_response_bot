import sqlite3
import aiohttp
import asyncio
import requests
import json
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json
with open("config.json", "r") as f:
    config = json.load(f)

# –¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
TELEGRAM_TOKEN = config["TELEGRAM_TOKEN"]

# –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è API HeadHunter
HH_ACCESS_TOKEN = config["HH_ACCESS_TOKEN"]
CLIENT_ID = config["CLIENT_ID"]
CLIENT_SECRET = config["CLIENT_SECRET"]
AUTH_CODE = config["AUTH_CODE"]
REFRESH_TOKEN = config["REFRESH_TOKEN"]

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ HH
if not HH_ACCESS_TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: HH_ACCESS_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å config.json.")

# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access_token —á–µ—Ä–µ–∑ refresh_token
def refresh_access_token():
    global HH_ACCESS_TOKEN, REFRESH_TOKEN
    url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "refresh_token",
        "refresh_token": REFRESH_TOKEN,
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET
    }
    response = requests.post(url, data=data)
    if response.status_code == 200:
        tokens = response.json()
        HH_ACCESS_TOKEN = tokens["access_token"]
        REFRESH_TOKEN = tokens["refresh_token"]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º config.json
        config["HH_ACCESS_TOKEN"] = HH_ACCESS_TOKEN
        config["REFRESH_TOKEN"] = REFRESH_TOKEN
        with open("config.json", "w") as f:
            json.dump(config, f, indent=4)
        
        logging.info(f"‚úÖ Access token –æ–±–Ω–æ–≤–ª—ë–Ω: {HH_ACCESS_TOKEN[:10]}...")
        asyncio.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    else:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è access token!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def setup_db():
    with sqlite3.connect("jobs.db") as conn:
        cursor = conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS applications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                vacancy_id TEXT UNIQUE,
                company_id TEXT,
                status TEXT
            )
        ''')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π —Å API HeadHunter
async def fetch_vacancies():
    url = "https://api.hh.ru/vacancies"
    params = {"text": "Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "area": 1, "per_page": 10}
    headers = {"Authorization": f"Bearer {HH_ACCESS_TOKEN}"}
    
    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers, params=params) as response:
            if response.status == 401:
                logging.error("–û—à–∏–±–∫–∞ 401: –¢–æ–∫–µ–Ω HH —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–ª—è–µ–º...")
                refresh_access_token()
                return await fetch_vacancies()
            elif response.status != 200:
                logging.error(f"–û—à–∏–±–∫–∞ API HH: {response.status}")
                return []
            
            data = await response.json()
            return data.get("items", [])

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
def is_already_applied(vacancy_id):
    with sqlite3.connect("jobs.db") as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM applications WHERE vacancy_id = ?", (vacancy_id,))
        result = cursor.fetchone()
    return result is not None

# –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
async def apply_to_vacancy(vacancy_id):
    if is_already_applied(vacancy_id):
        return False
    
    url = "https://api.hh.ru/negotiations"
    headers = {"Authorization": f"Bearer {HH_ACCESS_TOKEN}"}
    data = {"vacancy_id": vacancy_id}
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 401:
                logging.error("–û—à–∏–±–∫–∞ 401: –¢–æ–∫–µ–Ω HH —É—Å—Ç–∞—Ä–µ–ª. –û–±–Ω–æ–≤–ª—è–µ–º...")
                refresh_access_token()
                return await apply_to_vacancy(vacancy_id)
            elif response.status == 201:
                with sqlite3.connect("jobs.db") as conn:
                    cursor = conn.cursor()
                    cursor.execute("INSERT INTO applications (vacancy_id, company_id, status) VALUES (?, ?, ?)", (vacancy_id, "", "applied"))
                    conn.commit()
                return True
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–∏–∫–µ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é: {response.status}")
                return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
router = Router()

dp.include_router(router)

@router.message(Command("start"))
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üîç –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏"))
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏.", reply_markup=keyboard)

@router.message(F.text == "üîç –ù–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")
async def search_vacancies(message: types.Message):
    vacancies = await fetch_vacancies()
    applied_count = 0
    failed_count = 0
    
    for vacancy in vacancies:
        vacancy_id = vacancy["id"]
        if await apply_to_vacancy(vacancy_id):
            applied_count += 1
        else:
            failed_count += 1  # –°—á–∏—Ç–∞–µ–º –Ω–µ—É–¥–∞—á–Ω—ã–µ –æ—Ç–∫–ª–∏–∫–∏
        await asyncio.sleep(2)  # –ò–∑–±–µ–≥–∞–µ–º –ª–∏–º–∏—Ç–æ–≤
    
    await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {applied_count} \n‚ùå –û—à–∏–±–æ–∫ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {failed_count}")

async def main():
    setup_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
